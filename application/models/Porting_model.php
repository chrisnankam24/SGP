<?php
/*
 * Generated by CRUDigniter v2.3 Beta
 * www.crudigniter.com
 */

require_once APPPATH . "controllers/cadb/Porting.php";
require_once APPPATH . "controllers/cadb/Common.php";


class Porting_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get porting by portingId
     */
    function get_porting($portingId)
    {
        $response = $this->db->join('processnumber', 'porting.portingId = processnumber.processId')->get_where('porting',array('portingId'=>$portingId))->result_array();

        $final_response = null;

        if($response){

            $final_response = $response[0];
            unset($final_response['processType']);
            unset($final_response['numberState']);
            unset($final_response['pLastChangeDateTime']);

            $final_response['msisdn'] = [];

            foreach ($response as $res){
                $final_response['msisdn'][] = $res['msisdn'];
            }

        }

        return $final_response;

    }

    /*
    * Search porting by msisdn
    */
    function search_porting($msisdn)
    {
        return $this->db->join('processnumber', 'porting.portingId = processnumber.processId')->order_by('recipientSubmissionDateTime', 'desc')->get_where('porting',array('msisdn'=>$msisdn))->result_array();
    }

    /*
     * Get porting in particular state and for particular donor.
     * personType = 0 for personal and 1 for enterprise
     */
    function get_porting_by_state_and_donor($portingState, $donorNetworkId, $personType = null)
    {
        $query = "SELECT * FROM porting WHERE donorNetworkId = ? AND portingState = ?";

        if($personType == null){

        }elseif($personType == 0){ // Personal
            $query .= " AND legalPersonName IS NULL";
        }else if($personType == 1){ // Enterprise
            $query .= " AND physicalPersonLastName IS NULL";
        }else{

        }

        $response = $this->db->query($query, array($donorNetworkId, $portingState))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get porting in particular state and for particular recipient
     */
    function get_porting_by_state_and_recipient($portingState, $recipientNetworkId)
    {
        $response = $this->db->get_where('porting',array('portingState'=>$portingState, 'recipientNetworkId' => $recipientNetworkId))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports out
     */
    function get_total_ports_out($startDateTime, $endDateTime)
    {
        $response = $this->db->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::COMPLETED,
            'donorNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports in
     */
    function get_total_ports_in($startDateTime, $endDateTime)
    {
        $response = $this->db->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::COMPLETED,
            'recipientNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports out
     */
    function get_total_ports_out_denied_rejected($startDateTime, $endDateTime)
    {
        $deniedResponse = $this->db->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::DENIED,
            'donorNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        $rejectedResponse = $this->db->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::REJECTED,
            'donorNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        $response = array_merge($deniedResponse, $rejectedResponse);

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports out
     */
    function get_total_ports_in_denied_rejected($startDateTime, $endDateTime)
    {
        $deniedResponse = $this->db->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::DENIED,
            'recipientNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        $rejectedResponse = $this->db->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::REJECTED,
            'recipientNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        $response = array_merge($deniedResponse, $rejectedResponse);

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports out
     */
    function get_total_ports_out_cancelled($startDateTime, $endDateTime)
    {

        $response = $this->db->join('portingdenyrejectionabandon', 'portingdenyrejectionabandon.portingId = porting.portingId')->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::REJECTED,
            'denyRejectionReason' => \PortingService\Porting\rejectionReasonType::SUBSCRIBER_CANCELLED_PORTING, 'donorNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
 * Get total ports out
 */
    function get_total_ports_in_cancelled($startDateTime, $endDateTime)
    {

        $response = $this->db->join('portingdenyrejectionabandon', 'portingdenyrejectionabandon.portingId = porting.portingId')->get_where('porting',array('portingState'=>\PortingService\Porting\portingStateType::REJECTED,
            'denyRejectionReason' => \PortingService\Porting\rejectionReasonType::SUBSCRIBER_CANCELLED_PORTING, 'recipientNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports out
    */
    function get_total_ports_cancelled($startDateTime, $endDateTime)
    {

        $outResponse = $this->get_total_ports_out_cancelled($startDateTime, $endDateTime);
        $inResponse = $this->get_total_ports_in_cancelled($startDateTime, $endDateTime);

        $response = array_merge($inResponse, $outResponse);

        return $this->loadNumbers($response);

    }

    /*
     * Get all porting
     */
    function get_all_porting()
    {
        $response = $this->db->order_by('recipientSubmissionDateTime', 'desc')->get('porting')->result_array();

        return $this->loadNumbers($response);

    }

	 /*
     * Get all Auto-Validate
     */
    function get_all_auto_validate_porting()
    {
        return $this->db->select('porting.portingId')
                        ->from('porting')
                        ->join('portingstateevolution', 'porting.portingId = portingstateevolution.portingId')
                        ->where(array('portingstateevolution.portingState'=> \PortingService\Porting\portingStateType::APPROVED,'portingstateevolution.isAutoReached'=> 1))
                        //->where(array('rollback.rollbackState'=> \RollbackService\Rollback\rollbackStateType::OPENED,'rollbackstateevolution.rollbackState'=> \RollbackService\Rollback\rollbackStateType::OPENED,'rollbackstateevolution.isAutoReached'=> 1))
                        ->get()
                        ->result_array();
        
    }
	
    /*
     * Get all waiting
     */
    function get_all_waiting_porting()
    {
        $response = $this->db->where('portingState', \PortingService\Porting\portingStateType::APPROVED)->where('donorNetworkId', Operator::ORANGE_NETWORK_ID)->order_by('recipientSubmissionDateTime', 'desc')->get_where('porting')->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * function to add new porting
     */
    function add_porting($params)
    {
        $this->db->insert('porting',$params);
        return $this->db->insert_id();
    }

    /*
     * function to update porting
     */
    function update_porting($portingId,$params)
    {
        $this->db->where('portingId',$portingId);
        $response = $this->db->update('porting',$params);
        if($response)
        {
            return "porting updated successfully";
        }
        else
        {
            return "Error occuring while updating porting";
        }
    }

    /*
     * function to delete porting
     */
    function delete_porting($portingId)
    {
        $response = $this->db->delete('porting',array('portingId'=>$portingId));
        if($response)
        {
            return "porting deleted successfully";
        }
        else
        {
            return "Error occuring while deleting porting";
        }
    }

    /**
     * Loads numbers corresponding to process
     * @param $response
     * @return mixed
     */
    private function loadNumbers($response){

        foreach ($response as &$res){

            $res['msisdn'] = [];

            $numbers = $this->db->get_where('processnumber',array('processId'=>$res['portingId']))->result_array();

            foreach ($numbers as $number){
                $res['msisdn'][] = $number['msisdn'];
            }

        }

        return $response;
    }

}
