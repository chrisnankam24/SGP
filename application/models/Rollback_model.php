<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */

require_once APPPATH . "controllers/cadb/Rollback.php";

class Rollback_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get rollback by rollbackId
     */
    function get_rollback($rollbackId)
    {
        return $this->db->get_where('Rollback',array('rollbackId'=>$rollbackId))->row_array();
    }

    /*
    * Search rollbaczk by msisdn
    */
    function search_rollback($msisdn)
    {
        return $this->db->order_by('donorSubmissionDateTime', 'desc')->join('Porting', 'Porting.portingId = originalPortingId')->get_where('Rollback',array('startMSISDN'=>$msisdn))->result_array();
    }

    /*
     * Get rollback by rollbackId
     */
    function get_full_rollback($rollbackId)
    {
        $sql = "SELECT * FROM Rollback r INNER JOIN Porting p ON (r.originalPortingId = p.portingId) WHERE r.rollbackId = ?";
        $response = $this->db->query($sql, array($rollbackId))->row_array();
        return $response;
    }


    /*
     * Get rollback in particular state and for particular donor
     */
    function get_rollback_by_state_and_donor($rollbackState, $donorNetworkId)
    {
        $sql = "SELECT * FROM Rollback r INNER JOIN Porting p ON (r.originalPortingId = p.portingId) WHERE r.rollbackState = ? AND p.donorNetworkId = ?";
        $response = $this->db->query($sql, array($rollbackState, $donorNetworkId))->result_array();
        return $response;
    }

    /*
     * Get rollback in particular state and for particular recipient
     */
    function get_rollback_by_state_and_recipient($rollbackState, $recipientNetworkId)
    {
        $sql = "SELECT * FROM Rollback r INNER JOIN Porting p ON (r.originalPortingId = p.portingId) WHERE r.rollbackState = ? AND p.recipientNetworkId = ?";
        $response = $this->db->query($sql, array($rollbackState, $recipientNetworkId))->result_array();
        return $response;
    }

    /*
     * Get all rollback
     */
    function get_all_rollback()
    {
        return $this->db->order_by('donorSubmissionDateTime', 'desc')->join('Porting', 'Porting.portingId = originalPortingId')->get('Rollback')->result_array();
    }

    /*
     * Get all waiting
     */
    function get_all_waiting_rollback()
    {
        return $this->db->where('rollbackState', \RollbackService\Rollback\rollbackStateType::OPENED)->where('recipientNetworkId', Operator::ORANGE_NETWORK_ID)->join('Porting', 'Porting.portingId = originalPortingId')->order_by('donorSubmissionDateTime', 'desc')->get_where('Rollback')->result_array();
    }

    /*
     * function to add new rollback
     */
    function add_rollback($params)
    {
        $this->db->insert('Rollback',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update rollback
     */
    function update_rollback($rollbackId,$params)
    {
        $this->db->where('rollbackId',$rollbackId);
        $response = $this->db->update('Rollback',$params);
        if($response)
        {
            return "rollback updated successfully";
        }
        else
        {
            return "Error occuring while updating rollback";
        }
    }
    
    /*
     * function to delete rollback
     */
    function delete_rollback($rollbackId)
    {
        $response = $this->db->delete('Rollback',array('rollbackId'=>$rollbackId));
        if($response)
        {
            return "rollback deleted successfully";
        }
        else
        {
            return "Error occuring while deleting rollback";
        }
    }
}
