<?php
/*
 * Generated by CRUDigniter v2.3 Beta
 * www.crudigniter.com
 */

require_once APPPATH . "controllers/cadb/Rollback.php";

class Rollback_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get rollback by rollbackId
     */
    function get_rollback($rollbackId)
    {
        $response = $this->db->join('processnumber', 'rollback.rollbackId = processnumber.processId')->get_where('rollback',array('rollbackId'=>$rollbackId))->result_array();

        $final_response = null;

        if($response){

            $final_response = $response[0];
            unset($final_response['processType']);
            unset($final_response['numberState']);
            unset($final_response['pLastChangeDateTime']);

            $final_response['msisdn'] = [];

            foreach ($response as $res){
                $final_response['msisdn'][] = $res['msisdn'];
            }

        }

        return $final_response;

    }

    /*
    * Search rollback by msisdn
    */
    function search_rollback($msisdn)
    {
        return $this->db->select('rollback.*, porting.*, processnumber.msisdn')->order_by('donorSubmissionDateTime', 'desc')->join('processnumber', 'rollback.rollbackId = processnumber.processId')->join('porting', 'porting.portingId = originalPortingId')->get_where('rollback',array('msisdn'=>$msisdn))->result_array();
    }

    /*
     * Get rollback by rollbackId
     */
    function get_full_rollback($rollbackId)
    {
        $sql = "SELECT * FROM rollback r INNER JOIN porting p ON (r.originalPortingId = p.portingId) INNER JOIN processnumber pr ON (r.rollbackId = pr.processId) WHERE r.rollbackId = ?";

        $response = $this->db->query($sql, array($rollbackId))->result_array();

        $final_response = null;

        if($response){

            $final_response = $response[0];
            unset($final_response['processType']);
            unset($final_response['numberState']);
            unset($final_response['pLastChangeDateTime']);

            $final_response['msisdn'] = [];

            foreach ($response as $res){
                $final_response['msisdn'][] = $res['msisdn'];
            }

        }

        return $final_response;
    }

    /*
     * Get rollback in particular state and for particular donor
     */
    function get_rollback_by_state_and_donor($rollbackState, $donorNetworkId)
    {
        $sql = "SELECT * FROM rollback r INNER JOIN porting p ON (r.originalPortingId = p.portingId) WHERE r.rollbackState = ? AND p.donorNetworkId = ?";
        $response = $this->db->query($sql, array($rollbackState, $donorNetworkId))->result_array();
        return $this->loadNumbers($response);
    }

    /*
     * Get rollback in particular state and for particular recipient
     */
    function get_rollback_by_state_and_recipient($rollbackState, $recipientNetworkId)
    {
        $sql = "SELECT * FROM rollback r INNER JOIN porting p ON (r.originalPortingId = p.portingId) WHERE r.rollbackState = ? AND p.recipientNetworkId = ?";
        $response = $this->db->query($sql, array($rollbackState, $recipientNetworkId))->result_array();
        return $this->loadNumbers($response);
    }

    /*
     * Get all rollback
     */
    function get_all_rollback()
    {

        $response = $this->db->order_by('donorSubmissionDateTime', 'desc')->join('porting', 'porting.portingId = originalPortingId')->get('rollback')->result_array();

        return $this->loadNumbers($response);

    }

	/*
     * Get all Auto-Validate
     */
    function get_all_auto_validate_rollback()
    {
        return $this->db->select('rollback.rollbackId')
                        ->from('rollback')
                        ->join('rollbackstateevolution', 'rollback.rollbackId = rollbackstateevolution.rollbackId')
                        ->where(array('rollbackstateevolution.rollbackState'=> \RollbackService\Rollback\rollbackStateType::OPENED,'rollbackstateevolution.isAutoReached'=> 1))
                        //->where(array('rollback.rollbackState'=> \RollbackService\Rollback\rollbackStateType::OPENED,'rollbackstateevolution.rollbackState'=> \RollbackService\Rollback\rollbackStateType::OPENED,'rollbackstateevolution.isAutoReached'=> 1))
                        ->get()
                        ->result_array();
        
    }
	
    /*
     * Get all waiting
     */
    function get_all_waiting_rollback()
    {

        $response = $this->db->where('rollbackState', \RollbackService\Rollback\rollbackStateType::OPENED)->where('recipientNetworkId', Operator::ORANGE_NETWORK_ID)->join('porting', 'porting.portingId = originalPortingId')->order_by('donorSubmissionDateTime', 'desc')->get_where('rollback')->result_array();

        return $this->loadNumbers($response);

    }

    /*
     *
     */
    function get_total_rollbacks_out($startDateTime, $endDateTime)
    {
        $response = $this->db->join('porting', 'porting.portingId = originalPortingId')->get_where('rollback',array('rollbackState'=>\RollbackService\Rollback\rollbackStateType::COMPLETED,
            'donorNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     *
     */
    function get_total_rollbacks_in($startDateTime, $endDateTime)
    {
        $response = $this->db->join('porting', 'porting.portingId = originalPortingId')->get_where('rollback',array('rollbackState'=>\RollbackService\Rollback\rollbackStateType::COMPLETED,
            'recipientNetworkId' => Operator::ORANGE_NETWORK_ID, 'portingDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'portingDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * function to add new rollback
     */
    function add_rollback($params)
    {
        $this->db->insert('rollback',$params);
        return $this->db->insert_id();
    }

    /*
     * function to update rollback
     */
    function update_rollback($rollbackId,$params)
    {
        $this->db->where('rollbackId',$rollbackId);
        $response = $this->db->update('rollback',$params);
        if($response)
        {
            return "rollback updated successfully";
        }
        else
        {
            return "Error occuring while updating rollback";
        }
    }

    /*
     * function to delete rollback
     */
    function delete_rollback($rollbackId)
    {
        $response = $this->db->delete('rollback',array('rollbackId'=>$rollbackId));
        if($response)
        {
            return "rollback deleted successfully";
        }
        else
        {
            return "Error occuring while deleting rollback";
        }
    }

    /**
     * Loads numbers corresponding to process
     * @param $response
     * @return mixed
     */
    private function loadNumbers($response){

        foreach ($response as &$res){

            $res['msisdn'] = [];

            $numbers = $this->db->get_where('processnumber',array('processId'=>$res['rollbackId']))->result_array();

            foreach ($numbers as $number){
                $res['msisdn'][] = $number['msisdn'];
            }

        }

        return $response;
    }
}
