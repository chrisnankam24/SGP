<?php
/*
 * Generated by CRUDigniter v2.3 Beta
 * www.crudigniter.com
 */

require_once APPPATH . "controllers/cadb/ProvisionNotification.php";

use \ProvisionService\ProvisionNotification\provisionStateType as provisionStateType;

class provisioning_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get provisioning by proccessId
     */
    function get_provisioning($proccessId)
    {
        $response = $this->db->join('provisionnumber', 'provisioning.processId = provisionnumber.processId')->get_where('provisioning',array('provisioning.processId'=>$proccessId))->result_array();

        $final_response = null;

        if($response){

            $final_response = $response[0];
            unset($final_response['numberState']);
            unset($final_response['pLastChangeDateTime']);

            $final_response['msisdn'] = [];

            foreach ($response as $res){
                $final_response['msisdn'][] = $res['msisdn'];
            }

        }

        return $final_response;

    }

    /*
     * Get provisioning by state only
     */
    function get_provisioning_by_process_state_only($provisionState)
    {
        $response = $this->db->get_where('provisioning',array('provisionState' => $provisionState))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get provisioning for other Porting
     */
    function get_provisioning_other_porting()
    {
        $sql = "SELECT * FROM provisioning p WHERE p.processType = ?  AND p.provisionState = ? AND p.processId NOT IN (SELECT portingId FROM porting)";
        $response = $this->db->query($sql, array(processType::PORTING, provisionStateType::STARTED))->result_array();
        return $this->loadNumbers($response);
    }

    /*
     * Get provisioning for other Rollback
     */
    function get_provisioning_other_rollback()
    {
        $sql = "SELECT * FROM provisioning p WHERE p.processType = ? AND p.provisionState = ? AND p.processId NOT IN (SELECT rollbackId FROM rollback)";
        $response = $this->db->query($sql, array(processType::ROLLBACK, provisionStateType::STARTED))->result_array();
        return $this->loadNumbers($response);
    }

    /*
     * Get provisioning for other Return
     */
    function get_provisioning_other_return()
    {
        $sql = "SELECT * FROM provisioning p WHERE p.processType = ?  AND p.provisionState = ? AND p.processId NOT IN (SELECT returnId FROM numberreturn)";
        $response = $this->db->query($sql, array(processType::_RETURN, provisionStateType::STARTED))->result_array();
        return $this->loadNumbers($response);
    }


    /*
     * Get provisioning by state and Type
     */
    function get_provisioning_by_process_state($processId, $proccessType, $provisionState)
    {
        $response = $this->db->join('provisionnumber', 'provisioning.processId = provisionnumber.processId')->get_where('provisioning',array('provisioning.processId' => $processId, 'processType'=>$proccessType, 'provisionState' => $provisionState))->result_array();

        $final_response = null;

        if($response){

            $final_response = $response[0];
            unset($final_response['numberState']);
            unset($final_response['pLastChangeDateTime']);

            $final_response['msisdn'] = [];

            foreach ($response as $res){
                $final_response['msisdn'][] = $res['msisdn'];
            }

        }

        return $final_response;
    }

    /*
     * Get total ports out
     */
    function get_total_ports($startDateTime, $endDateTime)
    {
        $response = $this->db->get_where('provisioning',array('provisionState'=>provisionStateType::COMPLETED,
            'processType'=>processType::PORTING, 'routingChangeDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'routingChangeDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get total ports out
     */
    function get_total_rollbacks($startDateTime, $endDateTime)
    {
        $response = $this->db->get_where('provisioning',array('provisionState'=>provisionStateType::COMPLETED,
            'processType'=>processType::ROLLBACK, 'routingChangeDateTime >=' => date('Y-m-d H:i:s', strtotime($startDateTime)),
            'routingChangeDateTime <=' => date('Y-m-d H:i:s', strtotime($endDateTime))))->result_array();

        return $this->loadNumbers($response);

    }

    /*
     * Get all provisioning
     */
    function get_all_provisioning()
    {
        $response = $this->db->get('provisioning')->result_array();
        return $this->loadNumbers($response);
    }

    /*
     * function to add new provisioning
     */
    function add_provisioning($params)
    {
        $this->db->insert('provisioning',$params);
        return $this->db->insert_id();
    }

    /*
     * function to update provisioning
     */
    function update_provisioning($proccessId,$params)
    {
        $this->db->where('processId',$proccessId);
        $response = $this->db->update('provisioning',$params);
        if($response)
        {
            return "provisioning updated successfully";
        }
        else
        {
            return "Error occuring while updating provisioning";
        }
    }

    /*
     * function to delete provisioning
     */
    function delete_provisioning($proccessId)
    {
        $response = $this->db->delete('provisioning',array('processId'=>$proccessId));
        if($response)
        {
            return "provisioning deleted successfully";
        }
        else
        {
            return "Error occuring while deleting provisioning";
        }
    }

    /**
     * Loads numbers corresponding to process
     * @param $response
     * @return mixed
     */
    private function loadNumbers($response){

        foreach ($response as &$res){

            $res['msisdn'] = [];

            $numbers = $this->db->get_where('provisionnumber',array('processId'=>$res['processId']))->result_array();

            foreach ($numbers as $number){
                $res['msisdn'][] = $number['msisdn'];
            }

        }

        return $response;
    }
}
