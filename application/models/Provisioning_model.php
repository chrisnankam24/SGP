<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */
 
class provisioning_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get provisioning by proccessId
     */
    function get_provisioning($proccessId)
    {
        return $this->db->get_where('provisioning',array('processId'=>$proccessId))->row_array();
    }

    /*
     * Get provisioning by state only
     */
    function get_provisioning_by_process_state_only($provisionState)
    {
        return $this->db->get_where('provisioning',array('provisionState' => $provisionState))->result_array();
    }

    /*
     * Get provisioning for other Porting
     */
    function get_provisioning_other_porting()
    {
        $sql = "SELECT * FROM provisioning p WHERE p.processType = ? AND p.processId NOT IN (SELECT portingId FROM porting)";
        $response = $this->db->query($sql, array(processType::PORTING))->result_array();
        return $response;
    }

    /*
     * Get provisioning for other Rollback
     */
    function get_provisioning_other_rollback()
    {
        $sql = "SELECT * FROM provisioning p WHERE p.processType = ? AND p.processId NOT IN (SELECT rollbackId FROM rollback)";
        $response = $this->db->query($sql, array(processType::ROLLBACK))->result_array();
        return $response;
    }

    /*
     * Get provisioning for other Return
     */
    function get_provisioning_other_return()
    {
        $sql = "SELECT * FROM provisioning p WHERE p.processType = ? AND p.processId NOT IN (SELECT returnId FROM numberreturn)";
        $response = $this->db->query($sql, array(processType::_RETURN))->result_array();
        return $response;
    }


    /*
     * Get provisioning by state and Type
     */
    function get_provisioning_by_process_state($processId, $proccessType, $provisionState)
    {
        return $this->db->get_where('provisioning',array('processId' => $processId, 'processType'=>$proccessType, 'provisionState' => $provisionState))->row_array();
    }
    
    /*
     * Get all provisioning
     */
    function get_all_provisioning()
    {
        return $this->db->get('provisioning')->result_array();
    }
    
    /*
     * function to add new provisioning
     */
    function add_provisioning($params)
    {
        $this->db->insert('provisioning',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update provisioning
     */
    function update_provisioning($proccessId,$params)
    {
        $this->db->where('processId',$proccessId);
        $response = $this->db->update('provisioning',$params);
        if($response)
        {
            return "provisioning updated successfully";
        }
        else
        {
            return "Error occuring while updating provisioning";
        }
    }
    
    /*
     * function to delete provisioning
     */
    function delete_provisioning($proccessId)
    {
        $response = $this->db->delete('provisioning',array('processId'=>$proccessId));
        if($response)
        {
            return "provisioning deleted successfully";
        }
        else
        {
            return "Error occuring while deleting provisioning";
        }
    }
}
