<?php
/* 
 * Generated by CRUDigniter v2.3 Beta 
 * www.crudigniter.com
 */

require_once APPPATH . "controllers/cadb/Return.php";

class Numberreturn_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get numberreturn by returnId
     */
    function get_numberreturn($returnId)
    {
        $response = $this->db->join('processnumber', 'numberreturn.returnId = processnumber.processId')->get_where('numberreturn',array('returnId'=>$returnId))->result_array();


        $final_response = null;

        if($response){

            $final_response = $response[0];
            unset($final_response['processType']);
            unset($final_response['numberState']);
            unset($final_response['pLastChangeDateTime']);

            $final_response['msisdn'] = [];

            foreach ($response as $res){
                $final_response['msisdn'][] = $res['msisdn'];
            }

        }

        return $final_response;

    }

    /*
    * Search numberreturn by msisdn
    */
    function search_numberreturn($msisdn)
    {
        return $this->db->join('processnumber', 'numberreturn.returnId = processnumber.processId')->order_by('openDateTime', 'desc')->get_where('numberreturn',array('msisdn'=>$msisdn))->result_array();
    }

    /*
     * Get all numberreturn
     */
    function get_all_numberreturn()
    {
        $response = $this->db->order_by('openDateTime', 'desc')->get('numberreturn')->result_array();
        return $this->loadNumbers($response);
    }

    /*
     * Get all waiting
     */
    function get_all_waiting_return()
    {
        $response = $this->db->where('returnNumberState', \ReturnService\_Return\returnStateType::OPENED)->where('primaryOwnerNetworkId', Operator::ORANGE_NETWORK_ID)->get_where('numberreturn')->result_array();
        return $this->loadNumbers($response);

    }

    /*
     * Get nr in particular state and for particular owner
     */
    function get_nr_by_state_and_co($nrState, $ownerNetworkId)
    {
        $response = $this->db->get_where('numberreturn',array('returnNumberState'=>$nrState, 'ownerNetworkId' => $ownerNetworkId))->result_array();
        return $this->loadNumbers($response);

    }

    /*
     * Get nr in particular state and for particular owner
     */
    function get_nr_by_state_and_po($nrState, $primaryOwnerNetworkId)
    {
        $response = $this->db->get_where('numberreturn',array('returnNumberState'=>$nrState, 'primaryOwnerNetworkId' => $primaryOwnerNetworkId))->result_array();
        return $this->loadNumbers($response);

    }


    /*
     * function to add new numberreturn
     */
    function add_numberreturn($params)
    {
        $this->db->insert('numberreturn',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update numberreturn
     */
    function update_numberreturn($returnId,$params)
    {
        $this->db->where('returnId',$returnId);
        $response = $this->db->update('numberreturn',$params);
        if($response)
        {
            return "numberreturn updated successfully";
        }
        else
        {
            return "Error occuring while updating numberreturn";
        }
    }
    
    /*
     * function to delete numberreturn
     */
    function delete_numberreturn($returnId)
    {
        $response = $this->db->delete('numberreturn',array('returnId'=>$returnId));
        if($response)
        {
            return "numberreturn deleted successfully";
        }
        else
        {
            return "Error occuring while deleting numberreturn";
        }
    }

    /**
     * Loads numbers corresponding to process
     * @param $response
     * @return mixed
     */
    private function loadNumbers($response){

        foreach ($response as &$res){

            $res['msisdn'] = [];

            $numbers = $this->db->get_where('processnumber',array('processId'=>$res['returnId']))->result_array();

            foreach ($numbers as $number){
                $res['msisdn'][] = $number['msisdn'];
            }

        }

        return $response;
    }

}
